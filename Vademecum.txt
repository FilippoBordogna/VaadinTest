APPLICAZIONE DI TEST DEL FRAMEWROK VAADIN
LINKS:
- TUTORIAL: 								https://vaadin.com/docs/latest/getting-started
- CREAZIONE PROGETTO (Vaadin Start): 		https://vaadin.com/docs/latest/getting-started/project
- IMPORTAZIONE DEL PROGETTO (Eclipse):		https://vaadin.com/docs/latest/getting-started/import/eclipse
- ESECUZIONE DELL'APPLICAZIONE (Eclipse):	https://vaadin.com/docs/latest/getting-started/run/eclipse
- AGGIUNGERE UNA VIEW:						https://vaadin.com/docs/latest/getting-started/views
- VAADIN TUTORIAL:							https://vaadin.com/docs/latest/getting-started/tutorial
	- SETUP PROGETTO:						https://vaadin.com/docs/latest/getting-started/tutorial/project-setup
	- BUILD A FLOW UI:						https://vaadin.com/docs/latest/getting-started/tutorial/flow
		- FIRST VIEW:						https://vaadin.com/docs/latest/getting-started/tutorial/flow/first-view
		- SECOND VIEW:						https://vaadin.com/docs/latest/getting-started/tutorial/flow/second-view
		- ADD A LAYOUT:						https://vaadin.com/docs/latest/getting-started/tutorial/flow/layout
		- ADD A MESSAGE HISTORY:			https://vaadin.com/docs/latest/getting-started/tutorial/flow/message-history

##################
# CREAZIONE VIEW #
##################

FLOW/JAVA VIEW (utilzzabile in entrambi i layout di progetto):
Classi Java con annotazione @Route che estendono com.vaadin.flow.component.Component o una sottoclasse (tipicamente un layout).
Si può creare una view ovunque nel progetto ma per chiarezza si inseriscono src/main/java/com/example/application/views creando un package.
Estendere VerticalLayout significa che gli elementi della pagina vengono aggiunti verticalmente (uno sotto l'altro).

Codice:
@Route("todo") => la view sarà disponibile a http://localhost:8080/todo

var addButton = new Button("Add"); 
addButton.addClickListener(click -> { 
  [...]
}); => Aggiungo un listener al button (in questo caso onclick)
addButton.addClickShortcut(Key.ENTER); => Scorciatioia per il click sul button

add( 
      [...]
      new HorizontalLayout(
        [...]
      )
    ); => (Esteso VerticalLayout) Aggiungo gli elementi uno sotto l'altro. Se voglio due elementi sulla stessa riga dichiaro un HorizontalLayout(...)
	
	
HILLA/REACT VIEW (utilizzabile solo per layout Hilla): 
Componenti React situati nella cartella src/main/frontend/views con file-based routing (il routing dipende dalla posizione dei file nella cartella)

Codice:
export const config: ViewConfig = { 
    menu: { order: 1, icon: 'line-awesome/svg/tasks-solid.svg' },
    title: "Vaadin Todo"
} => Parametri aggiuntivi per la configurazione della view

function addTask() { 
	todos.value = [...todos.value, task.value]
	task.value = ""
} => Funzione che verrà associata alla proprietà onClick del button

return <VerticalLayout theme="spacing padding">
        <VerticalLayout>
            {todos.value.map((todo,index) => <Checkbox key={index} label={todo}/>)} 
        </VerticalLayout>
        <HorizontalLayout theme="spacing">
            <TextField value={task.value} onChange={e => task.value = e.target.value}/> 
            <Button onClick={addTask}>Add</Button> 
        </HorizontalLayout>
    </VerticalLayout>
	=> Ritorno la lista dei task mappata come checkbox + label sulla stessa riga e il campo descrizione + add button (con onClick) sulla stessa riga a capo
	
	
###################
# VAADIN TUTORIAL #
###################

DOCUMENTAZIONE SPRING: https://spring.io/projects/spring-boot
DOCUMENTAZIONE REACT: https://react.dev

CONCETTi CHIAVE:
- View: pagina dell'interfaccia utente di un'applicazione ovvero un insieme elementi che l'utente può visualizzare e con cui l'utente può interagire. In genere riempie un'intera scheda del browser o gran parte di essa.
- Routing: mappatura delle view su diversi percorsi URL.
- Layout: gli elementi visualizzati indipendentemente dalla view (es. intestazione e menù) vengono aggiunti a un layout. Un layout controlla anche dove viene eseguito il rendering della view al suo interno.	
- Server push: meccanismo con cui il server può inviare dati al browser senza prima ricevere una richiesta da esso.
- Security: misure adottate per proteggere l'applicazione dall'uso non autorizzato (include autenticazione e autorizzazione degli utenti).


##################
# SETUP PROGETTO #
##################

Flow consente di scrivere interfacce utente utilizzando Java lato server (backend). Il frontend che può essere modificato quando strettamente necessario.
Hilla segue l'approccio tradizionale in cui l'interfaccia utente viene eseguita esclusivamente nel browser.
Perciò nelle applicazione Vaadin piuttosto che riferirsi a frontend e backend si preferisce distinguere fra Presentation e Application Layer.

ARCHITETTURA DELL'APPLICAZIONE (CHAT):
- User’s web browser (Container)
- Spring Boot web application (Container)
	- Chat (Component)
		- Application Programming Interface (API): Chiamate dell'interfaccia utente
		- Service Provider Interface (SPI): Memorizzare e recuperare i messaggi
	- In-memory Storage (Component)
	
Se l'interfaccia utente viene implementata con Hilla/React, Vaadin genera un client TypeScript che può essere utilizzato per richiamare le API direttamente dal browser.
Vaadin si occupa dei controller REST.
Se l'interaccia utente viene implementata con Flow/Java bisogna costruire la Flow UI, un componente che usa le API della Chat all'interno della Java Virtual Machine (JVM) e non espone API pubbliche utilizzabili da altri componenti.
Vaadin si occupa del rendering dell'interfaccia utente nel browser e della comunicazione tra il browser e il server.

STRUTTURA DEL PROGETTO (Cartelle e file):
- Nel package com.example.application.chat si trovano i componenti della chat in cui le API consistono in classi e metodi pubblici (es. classe ChatService).
	- Il sottopackage com.example.application.chat.spi contiene le interfacce e le classi che queste necessitano.
- Nel package com.example.application.inmemorystorage risiedono i componenti per il salvataggio in memoria dei messaggi che non avendo API pubbliche consistono in classi package-private.
- Nel package com.example.application troviamo la classe Application che rappresenta l'intera applicazione. Questa classe setta il contesto applicativo dell'applicazione che interconnette i componenti assieme.


###############################
# BUILD A FLOW UI: FIRST VIEW #
###############################

ROUTING: 
@Route("<path>")
Il modo più semplice per passare parametri all'interno di una route Vaadin è implementare l'interfaccia HasUrlParameter che definisce un parametro in coda alla URL.
Il tipo del parametro deve essere uno fra Long, Integer, String e Boolean.
Documentazione Routing: https://vaadin.com/docs/latest/flow/routing

SERVER PUSH:
@Push nella Application Shell Class (Application che implementa l'interfaccia AppShellConfigurator)
Il modo più semplice per triggerare il server push è utilizzare il metodo UI.access(), che può essere chiamato da ogni thread. Il metodo prende come parametro una lambda o un puntatore ad una funzione e la eseguirà nel momento opportuno.
Vaadin si assicurerà che la sessione sia sospesa correttamente durante l'aggiornamento dell'interfaccia utente. Una volta che il metodo restituisce, Vaadin invierà automaticamente gli aggiornamenti al browser.
Documentazione Server Push: https://vaadin.com/docs/latest/flow/advanced/server-push

FLOW UI:
Possiamo vederlo come un albero di component che vengono notificati quando sono aggiunti (attached) o rimossi (detached) dall'albero.
Un  component può eseguire del codice quando questo accade facendo overriding dei metodi onAttach() e onDetach() forniti dalla classe Component (classe astratta di tutti i components).
E' possibile anche utilizzare i metodi addAttachListener() e addDetachListener() per registrare dei listener che verranno notificati quando un component è aggiunto o rimosso.
ATTENZIONE: Per non incorrere in memory leak, quando si vuole registrare un listener su un oggetto il cui ciclo di vita è indipendente dalla view, bisogna registrarlo dopo che la view è aggiunta all'albero e annullare la registrazione quando la view viene rimossa.
Documentazione sui cicli di vita: https://vaadin.com/docs/latest/flow/create-ui/creating-components/lifecycle-callbacks
Documentazione sui Flux: https://projectreactor.io/docs/core/release/reference

[Vedi file 
	src\main\java\com\example\application\views\channel\ChannelView.java => Channel View
	src\main\java\com\example\application\Application.java => Application Shell Class
]


################################
# BUILD A FLOW UI: SECOND VIEW #
################################

Titolo della pagina: @PageTitle("<name>")

Creare un link: return new RouterLink(<link-text>, <navigator-target(class)>, <url-parameter>);
Reindirizzare: event.forwardTo(LobbyView.class); 

[Vedi file 
	src\main\java\com\example\application\views\lobby\LobbyView.java => Lobby View
	src\main\java\com\example\application\views\channel\ChannelView.java => Channel View (Aggiunto solo reindirizzamento)
]


#################################
# BUILD A FLOW UI: ADD A LAYOUT #
#################################

AppLayout è un layout abbastanza comune nelle applicazioni. Questo divide la UI in 3 parti:
- Barra di navigazione orizzontale (navbar): parte superiore dello schermo oppure accanto al drawer
- Un menù laterale di navigazione (drawer)
- Area del contenuto viene effettuato il rendering della vista
Documentazione AppLayout: https://vaadin.com/docs/latest/components/app-layout
Documentazione Side Navigation: https://vaadin.com/docs/latest/components/side-nav

Titolo di una pagina statica: @PageTitle
Il titolo di una pagina dinamica è settato implementando l'interfaccia HasDynamicTitle fornita da Vaadin. 

[Vedi file 
	src\main\java\com\example\application\views\MainLayout.java => Layout Principale
]

#############################################
# BUILD A FLOW UI: ADD A MESSAGE TO HISTORY #
#############################################

Scenario: Un messaggio arriva all'interno del live streaming in un thread mentre la cronologia viene recuperata in un altro.
All'interno del metodo receiverMessages() tutte le interazioni sia con l'interfaccia utente che con l'elenco dei messaggi ricevuti avvengono all'interno di una chiamata a UI.access(). 
Questo funge da meccanismo di sincronizzazione dei thread, poiché Vaadin si assicurerà che solo un thread alla volta possa accedere alla stessa istanza dell'interfaccia utente.

[Vedi file 
	src\main\java\com\example\application\util\LimitedSortedAppendOnlyList.java => LimitedSortedAppendOnlyList object
	src\main\java\com\example\application\views\channel\ChannelView.java => Channel View (Aggiunto meccanismo di cronologia con LimitedSortedAppendOnlyList obj)
]